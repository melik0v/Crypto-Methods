# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Hill.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from math import isqrt
from sympy import Matrix


# English uppercase
en_alph = list(map(chr, range(ord('a'), ord('z') + 1)))
en_alph += ['.', '?', '!']
# Russian uppercase
ru_alph = list(map(chr, range(ord('а'), ord('я') + 1)))
ru_alph.insert(6, 'ё')
ru_alph += ['.', '?', '!', ',']


def define_language(letter: str) -> str or None:
    letter = letter.lower()
    if letter in en_alph:
        return 'english'
    elif letter in ru_alph:
        return 'russian'
    else:
        return None


def stong(text, step) -> list:
    """
    Split text to N-grams

    :param text: text to be splited
    :param step: size of n-gramm
    :return: list of N-grams
    """
    ngrams = []
    tmp = ''
    add_symbols_count = step - len(text) % step
    if add_symbols_count == step:
        add_symbols_count = 0
    text += text[-1] * add_symbols_count
    for i in range(len(text)):
        tmp += text[i]
        if len(tmp) == step:
            ngrams.append(tmp)
            tmp = ''
    return ngrams


def vtong(vector, alphabet) -> str:
    """
    Transform vector to N-gramm.

    Args:
        vector: vector to transform
        alphabet: the alphabet from which the string is composed
    """
    tmp = ''
    for i in vector:
        tmp += alphabet[i[0]]
    return tmp

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(685, 540)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(685, 540))
        MainWindow.setMaximumSize(QtCore.QSize(685, 540))
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(0, 0,0);")
        self.centralwidget.setObjectName("centralwidget")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(490, 310, 61, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;\n"
"text-transform: uppercase;\n"
"")
        self.label_10.setObjectName("label_10")
        self.decrypt_btn = QtWidgets.QPushButton(self.centralwidget)
        self.decrypt_btn.setGeometry(QtCore.QRect(280, 480, 130, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.decrypt_btn.setFont(font)
        self.decrypt_btn.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: grey;\n"
"    border-radius: 7px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(102, 102, 102);\n"
"}")
        self.decrypt_btn.setObjectName("decrypt_btn")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(460, 50, 151, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_9.setObjectName("label_9")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(0, 269, 701, 41))
        self.frame_2.setAutoFillBackground(False)
        self.frame_2.setStyleSheet("background-color: rgb(49, 80, 78)")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        self.label_7.setGeometry(QtCore.QRect(220, 0, 271, 41))
        self.label_7.setStyleSheet("color: white;\n"
"font: 18pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_7.setObjectName("label_7")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 701, 41))
        self.frame.setStyleSheet("background-color: rgb(49, 80, 78)")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(240, 0, 211, 41))
        self.label_4.setStyleSheet("color: white;\n"
"font: 18pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_4.setObjectName("label_4")
        self.encrypt_btn = QtWidgets.QPushButton(self.centralwidget)
        self.encrypt_btn.setGeometry(QtCore.QRect(520, 220, 130, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.encrypt_btn.setFont(font)
        self.encrypt_btn.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: grey;\n"
"    border-radius: 7px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(102, 102, 102);\n"
"}")
        self.encrypt_btn.setObjectName("encrypt_btn")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(120, 50, 61, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color: white;\n"
"")
        self.label_8.setObjectName("label_8")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(90, 310, 151, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;\n"
"text-transform: uppercase;\n"
"")
        self.label_11.setObjectName("label_11")
        self.text_edit_encrypted = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.text_edit_encrypted.setGeometry(QtCore.QRect(20, 340, 290, 120))
        self.text_edit_encrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.text_edit_encrypted.setObjectName("text_edit_encrypted")
        self.textBrowser_encrypted = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_encrypted.setGeometry(QtCore.QRect(380, 80, 290, 120))
        self.textBrowser_encrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.textBrowser_encrypted.setObjectName("textBrowser_encrypted")
        self.textBrowser_decrypted = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_decrypted.setGeometry(QtCore.QRect(380, 340, 290, 120))
        self.textBrowser_decrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.textBrowser_decrypted.setObjectName("textBrowser_decrypted")
        self.text_edit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.text_edit.setGeometry(QtCore.QRect(20, 80, 290, 120))
        self.text_edit.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.text_edit.setObjectName("text_edit")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(100, 220, 401, 31))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("color: white;")
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 230, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: white;")
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(90, 480, 134, 24))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("color: white")
        self.comboBox.addItem("ENG")
        self.comboBox.addItem("RUS")
        self.comboBox.setEditable(False)
        self.comboBox.setCurrentText("")
        self.comboBox.setObjectName("comboBox")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 480, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: white;")
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Hill"))
        self.label_10.setText(_translate("MainWindow", "Текст"))
        self.decrypt_btn.setText(_translate("MainWindow", "Расшифровать"))
        self.label_9.setText(_translate("MainWindow", "ШИФРОТЕКСТ"))
        self.label_7.setText(_translate("MainWindow", "РАСШИФРОВАНИЕ"))
        self.label_4.setText(_translate("MainWindow", "ШИФРОВАНИЕ"))
        self.encrypt_btn.setText(_translate("MainWindow", "Зашифровать"))
        self.label_8.setText(_translate("MainWindow", "ТЕКСТ"))
        self.label_11.setText(_translate("MainWindow", "Шифротекст"))
        self.label.setText(_translate("MainWindow", "КЛЮЧ"))
        self.label_2.setText(_translate("MainWindow", "ЯЗЫК"))


class Hill(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(Hill, self).__init__()
        self.setupUi(self)
        self.functions()

    def hill(self, text, key, alphabet, mode):
        input_text = text
        text = ''

        for i in input_text:
            if i.lower() in alphabet:
                text += i
        for i in key:
            if i not in alphabet:
                return "Ключ и текст должны быть из одного алфавита"
        module = len(alphabet)
        key_length = len(key)
        n = isqrt(key_length)
        if n ** 2 != key_length:
            return "Длина ключа должна быть квадратом числа"
        matrix_key = np.array(list(map(lambda x: alphabet.index(x), key))).reshape((n, n))
        determinant = int(np.linalg.det(matrix_key)) % module
        if determinant == 0:
            return "Матрица вырождена"
        if np.gcd(determinant, module) != 1:
            return "Неверный ключ"


        match mode:
            case 'encrypt':
                pass
            case 'decrypt':
                matrix_key = np.array(Matrix(matrix_key).inv_mod(len(alphabet)))

        # transform n-gramms to vectors
        ngrams = stong(text, n)
        ngram_vectors = []
        for ngram in ngrams:
            tmp = np.array(list(map(lambda x: alphabet.index(x.lower()), ngram))).reshape((n, 1))
            ngram_vectors.append(tmp)
        ngram_vectors = np.array(ngram_vectors)

        # encryption/decryption
        transformed_vectors = []
        for vector in ngram_vectors:
            tmp = np.dot(matrix_key, vector) % module
            transformed_vectors.append(tmp)
        transformed_vectors = np.array(transformed_vectors)

        # compose n-gramms from vectors
        result = []
        for vector in transformed_vectors:
            result.append(vtong(vector, alphabet))

        result = ''.join(result)
        result = list(result)
        print(ngrams)
        print(ngram_vectors)
        print(result)
        print(matrix_key)

        for i in range(len(input_text)):
            if input_text[i].lower() not in alphabet:
                result.insert(i, input_text[i])
            if input_text[i].isalpha() and text[i].upper() == input_text[i]:
                result[i] = result[i].upper()

        return ''.join(result)

    def functions(self):
        self.encrypt_btn.clicked.connect(lambda: self.encrypt(self.text_edit.toPlainText(),
                                                              self.lineEdit.text(), self.comboBox.currentText()))

        self.decrypt_btn.clicked.connect(lambda: self.decrypt(self.text_edit_encrypted.toPlainText(),
                                                              self.lineEdit.text(), self.comboBox.currentText()))

    def encrypt(self, text, key, lang):
        alphabet = []
        key = key.lower()
        match lang:
            case 'RUS':
                alphabet = ru_alph
            case 'ENG':
                alphabet = en_alph

        encrypted_text = self.hill(text, key, alphabet, mode='encrypt')
        print(encrypted_text)
        self.textBrowser_encrypted.setText(encrypted_text)

    def decrypt(self, text, key, lang):
        alphabet = []
        key = key.lower()
        match lang:
            case 'RUS':
                alphabet = ru_alph
            case 'ENG':
                alphabet = en_alph

        decrypted_text = self.hill(text, key, alphabet, mode='decrypt')
        print(decrypted_text)
        self.textBrowser_decrypted.setText(decrypted_text)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = Hill()
    # MainWindow = QtWidgets.QMainWindow()
    # ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())