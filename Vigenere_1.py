# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Vigenere.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog
import numpy as np
from os import path

# English lowercase
en_alph_lower = list(map(chr, range(ord('a'), ord('z') + 1)))

# English uppercase
en_alph_upper = list(map(chr, range(ord('A'), ord('Z') + 1)))

# Russian lowercase
ru_alph_lower = list(map(chr, range(ord('а'), ord('я') + 1)))
ru_alph_lower.insert(6, 'ё')

# Russian uppercase
ru_alph_upper = list(map(chr, range(ord('А'), ord('Я') + 1)))
ru_alph_upper.insert(6, 'Ё')


def show_err(code: int):
    error = QMessageBox()
    error.setWindowTitle('Ошибка')
    error.setIcon(QMessageBox.Critical)
    error.setStandardButtons(QMessageBox.Close)
    close_btn = error.button(QMessageBox.Close)
    close_btn.setText('Закрыть')
    if code == 2:
        error.setText('НЕВЕРНЫЙ СИМВОЛ!')
        error.setInformativeText('Поддерживаются только буквы '
                                 'проверьте ключ на соответствие требованиям')
        error.exec_()


def tolist(array: np.ndarray) -> list:
    result = []
    for i in array:
        result.append(i)
    return result


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(685, 580)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(685, 580))
        MainWindow.setMaximumSize(QtCore.QSize(685, 580))
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(0, 0,0);")
        self.centralwidget.setObjectName("centralwidget")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(490, 310, 61, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;\n"
"text-transform: uppercase;\n"
"")
        self.label_10.setObjectName("label_10")
        self.decrypt_btn = QtWidgets.QPushButton(self.centralwidget)
        self.decrypt_btn.setGeometry(QtCore.QRect(520, 480, 130, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.decrypt_btn.setFont(font)
        self.decrypt_btn.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: grey;\n"
"    border-radius: 7px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(102, 102, 102);\n"
"}")
        self.decrypt_btn.setObjectName("decrypt_btn")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(460, 50, 151, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_9.setObjectName("label_9")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(0, 269, 701, 41))
        self.frame_2.setAutoFillBackground(False)
        self.frame_2.setStyleSheet("background-color: rgb(49, 80, 78)")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        self.label_7.setGeometry(QtCore.QRect(220, 0, 271, 41))
        self.label_7.setStyleSheet("color: white;\n"
"font: 18pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_7.setObjectName("label_7")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 701, 41))
        self.frame.setStyleSheet("background-color: rgb(49, 80, 78)")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(240, 0, 211, 41))
        self.label_4.setStyleSheet("color: white;\n"
"font: 18pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_4.setObjectName("label_4")
        self.encrypt_btn = QtWidgets.QPushButton(self.centralwidget)
        self.encrypt_btn.setGeometry(QtCore.QRect(520, 220, 130, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.encrypt_btn.setFont(font)
        self.encrypt_btn.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: grey;\n"
"    border-radius: 7px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(102, 102, 102);\n"
"}")
        self.encrypt_btn.setObjectName("encrypt_btn")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(120, 50, 61, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color: white;\n"
"")
        self.label_8.setObjectName("label_8")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(90, 310, 151, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;\n"
"text-transform: uppercase;\n"
"")
        self.label_11.setObjectName("label_11")
        self.text_edit_encrypted = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.text_edit_encrypted.setGeometry(QtCore.QRect(20, 340, 290, 120))
        self.text_edit_encrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.text_edit_encrypted.setObjectName("text_edit_encrypted")
        self.textBrowser_encrypted = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_encrypted.setGeometry(QtCore.QRect(380, 80, 290, 120))
        self.textBrowser_encrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.textBrowser_encrypted.setObjectName("textBrowser_encrypted")
        self.textBrowser_decrypted = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_decrypted.setGeometry(QtCore.QRect(380, 340, 290, 120))
        self.textBrowser_decrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.textBrowser_decrypted.setObjectName("textBrowser_decrypted")
        self.text_edit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.text_edit.setGeometry(QtCore.QRect(20, 80, 290, 120))
        self.text_edit.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.text_edit.setObjectName("text_edit")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(100, 220, 401, 31))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("color: white;")
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 230, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: white;")
        self.label.setObjectName("label")
        self.InputFile_btn = QtWidgets.QPushButton(self.centralwidget)
        self.InputFile_btn.setGeometry(QtCore.QRect(20, 480, 120, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(8)
        self.InputFile_btn.setFont(font)
        self.InputFile_btn.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: grey;\n"
"    border-radius: 7px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(102, 102, 102);\n"
"}")
        self.InputFile_btn.setObjectName("InputFile_btn")
        self.OutputFile_btn = QtWidgets.QPushButton(self.centralwidget)
        self.OutputFile_btn.setGeometry(QtCore.QRect(20, 520, 120, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(8)
        self.OutputFile_btn.setFont(font)
        self.OutputFile_btn.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: grey;\n"
"    border-radius: 7px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(102, 102, 102);\n"
"}")
        self.OutputFile_btn.setObjectName("OutputFile_btn")
        self.input_path = QtWidgets.QLabel(self.centralwidget)
        self.input_path.setGeometry(QtCore.QRect(160, 480, 311, 30))
        self.input_path.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;\n"
"text-transform: uppercase;\n"
"")
        self.input_path.setObjectName("input_path")
        self.output_path = QtWidgets.QLabel(self.centralwidget)
        self.output_path.setGeometry(QtCore.QRect(160, 520, 311, 30))
        self.output_path.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;\n"
"text-transform: uppercase;\n"
"")
        self.output_path.setObjectName("output_path")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Вижинер"))
        self.label_10.setText(_translate("MainWindow", "Текст"))
        self.decrypt_btn.setText(_translate("MainWindow", "Расшифровать"))
        self.label_9.setText(_translate("MainWindow", "ШИФРОТЕКСТ"))
        self.label_7.setText(_translate("MainWindow", "РАСШИФРОВАНИЕ"))
        self.label_4.setText(_translate("MainWindow", "ШИФРОВАНИЕ"))
        self.encrypt_btn.setText(_translate("MainWindow", "Зашифровать"))
        self.label_8.setText(_translate("MainWindow", "ТЕКСТ"))
        self.label_11.setText(_translate("MainWindow", "Шифротекст"))
        self.label.setText(_translate("MainWindow", "КЛЮЧ"))
        self.InputFile_btn.setText(_translate("MainWindow", "Входной файл"))
        self.OutputFile_btn.setText(_translate("MainWindow", "Выходной файл"))
        self.input_path.setText(_translate("MainWindow", "NO INPUT FILE"))
        self.output_path.setText(_translate("MainWindow", "NO OUTPUT FILE"))


class App(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(App, self).__init__()
        self.setupUi(self)
        self.add_functions()

    def open_file_dialog_box(self):
        file, _ = QFileDialog.getOpenFileName(self, 'Open File', './', "Text file (*.txt)")
        return path.basename(file)

    def open_input_file(self):
        filename = self.open_file_dialog_box()
        if filename == '':
            self.input_path.setText('NO INPUT FILE')
        else:
            self.input_path.setText(filename)

    def open_output_file(self):
        filename = self.open_file_dialog_box()
        if filename == '':
            self.input_path.setText('NO OUTPUT FILE')
        else:
            self.output_path.setText(filename)

    def add_functions(self):
        self.encrypt_btn.clicked.connect(lambda: self.encrypt(self.text_edit.toPlainText(),
                                                              self.lineEdit.text()))

        self.decrypt_btn.clicked.connect(lambda: self.decrypt(self.text_edit_encrypted.toPlainText(),
                                                              self.lineEdit.text()))

        self.OutputFile_btn.clicked.connect(lambda: self.open_output_file())
        self.InputFile_btn.clicked.connect(lambda: self.open_input_file())

    def encrypt(self, text, key):
        """
        Encryption by the alberti algorithm
        :param text: Text to encrypt
        :param key: Key word
        :param filename: Name of input file
        """

        if self.input_path.text() != 'NO INPUT FILE':
            fin = open(self.input_path.text(), 'r')
            text = fin.read()
            fin.close()
        # key under the text
        text_key = ''
        # counter for ch != ' '
        counter = 0
        encrypted_text = ''
        if not key.isalpha():
            show_err(2)
            return 0
        for ch in text:
            if ch not in en_alph_lower and ch not in en_alph_upper and ch not in ru_alph_lower and \
                    ch not in ru_alph_upper:
                text_key += ' '
                continue

            text_key += key[counter % len(key)]
            counter += 1

        for i, j in zip(text, text_key):
            # looking for which alphabet the key symbol belongs to
            if j in en_alph_lower:
                offset = en_alph_lower.index(j)
            elif j in en_alph_upper:
                offset = en_alph_upper.index(j)
            elif j in ru_alph_lower:
                offset = ru_alph_lower.index(j)
            elif j in ru_alph_upper:
                offset = ru_alph_upper.index(j)
            else:
                offset = 0
            # looking for which alphabet the text symbol belongs to
            if i in en_alph_lower:
                rolled_alph = np.roll(en_alph_lower, -offset)
                encrypted_text += rolled_alph[en_alph_lower.index(i)]
                continue

            elif i in en_alph_upper:
                rolled_alph = np.roll(en_alph_upper, -offset)
                encrypted_text += rolled_alph[en_alph_upper.index(i)]
                continue

            elif i in ru_alph_lower:
                rolled_alph = np.roll(ru_alph_lower, -offset)
                encrypted_text += rolled_alph[ru_alph_lower.index(i)]
                continue

            elif i in ru_alph_upper:
                rolled_alph = np.roll(ru_alph_upper, -offset)
                encrypted_text += rolled_alph[ru_alph_upper.index(i)]
                continue
            else:
                encrypted_text += i

        print(text)
        print(text_key)
        print(encrypted_text)
        if self.output_path.text() != 'NO OUTPUT FILE':
            fout = open(self.output_path.text(), 'w')
            fout.write(encrypted_text)
            fout.close()
        else:
            self.textBrowser_encrypted.setPlainText(encrypted_text)

    def decrypt(self, text, key):
        """
                Decryption by the alberti algorithm
                :param text: Text to decrypt
                :param key: Key word
                :param filename: Name of output file
        """
        # key under the text
        text_key = ''
        if not key.isalpha():
            show_err(2)
            return 0
        counter = 0
        decrypted_text = ''
        for ch in text:
            if ch not in en_alph_lower and ch not in en_alph_upper and ch not in ru_alph_lower and \
                    ch not in ru_alph_upper:
                text_key += ' '
                continue
            text_key += key[counter % len(key)]
            counter += 1

        for i, j in zip(text, text_key):
            # looking for which alphabet the key symbol belongs to
            if j in en_alph_lower:
                offset = en_alph_lower.index(j)
            elif j in en_alph_upper:
                offset = en_alph_upper.index(j)
            elif j in ru_alph_lower:
                offset = ru_alph_lower.index(j)
            elif j in ru_alph_upper:
                offset = ru_alph_upper.index(j)
            else:
                offset = 0

            # looking for which alphabet the text symbol belongs to
            if i in en_alph_lower:
                rolled_alph = tolist(np.roll(en_alph_lower, -offset))
                decrypted_text += en_alph_lower[rolled_alph.index(i)]

            elif i in en_alph_upper:
                rolled_alph = tolist(np.roll(en_alph_upper, -offset))
                decrypted_text += en_alph_upper[rolled_alph.index(i)]

            elif i in ru_alph_lower:
                rolled_alph = tolist(np.roll(ru_alph_lower, -offset))
                decrypted_text += ru_alph_lower[rolled_alph.index(i)]

            elif i in ru_alph_upper:
                rolled_alph = tolist(np.roll(ru_alph_upper, -offset))
                decrypted_text += ru_alph_upper[rolled_alph.index(i)]
            else:
                decrypted_text += i

        self.textBrowser_decrypted.setPlainText(decrypted_text)
        print(text)
        print(text_key)
        print(decrypted_text)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = App()
    #MainWindow = QtWidgets.QMainWindow()
    # ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
