# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'richelieu.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import re
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import numpy as np

# English uppercase
en_alph = list(map(chr, range(ord('a'), ord('z') + 1)))
en_alph.pop(9)
# Russian uppercase
ru_alph = list(map(chr, range(ord('а'), ord('я') + 1)))
# ru_alph.insert(6, 'Ё')


class PlayfairError(Exception):
    pass


def show_err(code: int):
    error = QMessageBox()
    error.setWindowTitle('Ошибка')
    error.setIcon(QMessageBox.Critical)
    error.setStandardButtons(QMessageBox.Close)
    close_btn = error.button(QMessageBox.Close)
    close_btn.setText('Закрыть')
    if code == 1:
        error.setText('Text is empty')
    elif code == 2:
        error.setText('Invalid key')
    elif code == 3:
        error.setText('Text and key must be from same alphabets')
    error.exec_()


def split_to_bigrams(text, symbol_1, symbol_2) -> list:
    i = 0
    if len(text) == 1:
        if text[0] == symbol_1:
            text += symbol_2
        else:
            text += symbol_1
    while True:
        if text[i] == text[i + 1] and (i + 1) % 2 != 0:
            if text[i] == symbol_1.lower() or text[i] == symbol_1:
                text = text[:i + 1] + symbol_2 + text[i + 1:]
            else:
                text = text[:i + 1] + symbol_1 + text[i + 1:]
        i += 1
        if i == len(text) - 1:
            break
    bigrams = [text[i:i + 2] for i in range(0, len(text), 2)]

    if len(bigrams[-1]) == 1:
        if bigrams[-1] == symbol_1.lower() or bigrams[-1] == symbol_1:
            bigrams[-1] += symbol_2
        else:
            bigrams[-1] += symbol_1
    return bigrams


def index(element, matrix) -> (int, int):
    """
    Find element in matrix
    :param element: Element of matrix
    :param matrix: Matrix for element search
    :return: Tuple of indicies (str, col)
    """
    i, j = np.where(matrix == element.lower())
    return i[0], j[0]


def define_language(text: str) -> str or None:
    if text[0].lower() in en_alph:
        return 'english'
    elif text[0].lower() in ru_alph:
        return 'russian'
    else:
        return None


def playfair(text: str, key: str, mode: str, alphabet) -> str:
    """
    Playfair algorithm

    :param text: text to be (en/de)crypted
    :param key: key word for mixing matrix
    :param mode: encryption or decryption
    :param alphabet: alphabet
    :return: (en/de)crypted string
    """
    if not text:
        show_err(1)
        return ''
    if not key:
        show_err(2)
        return ''
    if not re.match(r'(^[а-яА-ЯёЁ]*$)|(^[a-zA-Z]*$)', key):
        show_err(2)
        return ''

    match mode:
        case 'encrypt':
            sign = 1
        case 'decrypt':
            sign = -1
        case _:
            sign = None
    lang = define_language(key[0])
    match lang:
        case 'english':
            shape = (5, 5)
            extra_letter_1 = 'X'
            extra_letter_2 = 'Q'
            swap_letters = ('j', 'i')
        case 'russian':
            shape = (4, 8)
            extra_letter_1 = 'Ю'
            extra_letter_2 = 'Ф'
            swap_letters = ('ё', 'е')
        case _:
            raise Exception("Wrong language")

    key = key.replace(*swap_letters)
    key = list(key)
    text = text.replace(*swap_letters)

    # making mixed alphabet with key
    unique_symbols = []
    for letter in key + alphabet:
        if letter not in unique_symbols:
            unique_symbols.append(letter)

    symbol_matrix = np.array(unique_symbols).reshape(shape)
    print(symbol_matrix)
    bigrams = split_to_bigrams(text, extra_letter_1, extra_letter_2)
    print(bigrams)
    new_text = ''.join(bigrams)


    transformed_letters = ''
    for first_letter, second_letter in bigrams:

        first_letter_str, first_letter_col = index(first_letter, symbol_matrix)
        second_letter_str, second_letter_col = index(second_letter, symbol_matrix)
        # second rule
        if first_letter_str == second_letter_str:
            first_letter_col = (first_letter_col + 1 * sign) % shape[1]
            second_letter_col = (second_letter_col + 1 * sign) % shape[1]
        # third rule
        elif first_letter_col == second_letter_col:
            first_letter_str = (first_letter_str + 1 * sign) % shape[0]
            second_letter_str = (second_letter_str + 1 * sign) % shape[0]
        # fourth rule
        else:
            first_letter_col, second_letter_col = second_letter_col, first_letter_col

        new_first_letter = symbol_matrix[first_letter_str][first_letter_col]
        new_second_letter = symbol_matrix[second_letter_str][second_letter_col]

        transformed_letters += new_first_letter
        transformed_letters += new_second_letter

    transformed_letters = list(transformed_letters)
    for i in range(len(new_text)):
        if new_text[i].isupper():
            transformed_letters[i] = transformed_letters[i].upper()

    return ''.join(transformed_letters)




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(685, 540)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(685, 540))
        MainWindow.setMaximumSize(QtCore.QSize(685, 540))
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(0, 0,0);")
        self.centralwidget.setObjectName("centralwidget")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(490, 310, 61, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;\n"
"text-transform: uppercase;\n"
"")
        self.label_10.setObjectName("label_10")
        self.decrypt_btn = QtWidgets.QPushButton(self.centralwidget)
        self.decrypt_btn.setGeometry(QtCore.QRect(280, 480, 130, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.decrypt_btn.setFont(font)
        self.decrypt_btn.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: grey;\n"
"    border-radius: 7px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(102, 102, 102);\n"
"}")
        self.decrypt_btn.setObjectName("decrypt_btn")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(460, 50, 151, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_9.setObjectName("label_9")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(0, 269, 701, 41))
        self.frame_2.setAutoFillBackground(False)
        self.frame_2.setStyleSheet("background-color: rgb(49, 80, 78)")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        self.label_7.setGeometry(QtCore.QRect(220, 0, 271, 41))
        self.label_7.setStyleSheet("color: white;\n"
"font: 18pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_7.setObjectName("label_7")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 701, 41))
        self.frame.setStyleSheet("background-color: rgb(49, 80, 78)")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(240, 0, 211, 41))
        self.label_4.setStyleSheet("color: white;\n"
"font: 18pt \"Century Gothic\";\n"
"font-weight: 700;")
        self.label_4.setObjectName("label_4")
        self.encrypt_btn = QtWidgets.QPushButton(self.centralwidget)
        self.encrypt_btn.setGeometry(QtCore.QRect(520, 220, 130, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        self.encrypt_btn.setFont(font)
        self.encrypt_btn.setStyleSheet("QPushButton {\n"
"    color: black;\n"
"    background-color: grey;\n"
"    border-radius: 7px;\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(102, 102, 102);\n"
"}")
        self.encrypt_btn.setObjectName("encrypt_btn")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(120, 50, 61, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color: white;\n"
"")
        self.label_8.setObjectName("label_8")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(90, 310, 151, 30))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(87)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: white;\n"
"font: 14pt \"Century Gothic\";\n"
"font-weight: 700;\n"
"text-transform: uppercase;\n"
"")
        self.label_11.setObjectName("label_11")
        self.text_edit_encrypted = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.text_edit_encrypted.setGeometry(QtCore.QRect(20, 340, 290, 120))
        self.text_edit_encrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.text_edit_encrypted.setObjectName("text_edit_encrypted")
        self.textBrowser_encrypted = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_encrypted.setGeometry(QtCore.QRect(380, 80, 290, 120))
        self.textBrowser_encrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.textBrowser_encrypted.setObjectName("textBrowser_encrypted")
        self.textBrowser_decrypted = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_decrypted.setGeometry(QtCore.QRect(380, 340, 290, 120))
        self.textBrowser_decrypted.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.textBrowser_decrypted.setObjectName("textBrowser_decrypted")
        self.text_edit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.text_edit.setGeometry(QtCore.QRect(20, 80, 290, 120))
        self.text_edit.setStyleSheet("background-color: rgb(42, 42, 42);\n"
"border: 1px solid gray;\n"
"border-radius: 10px;\n"
"color: white;\n"
"")
        self.text_edit.setObjectName("text_edit")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(100, 220, 401, 31))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("color: white;")
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 230, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: white;")
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Playfair"))
        self.label_10.setText(_translate("MainWindow", "Текст"))
        self.decrypt_btn.setText(_translate("MainWindow", "Расшифровать"))
        self.label_9.setText(_translate("MainWindow", "ШИФРОТЕКСТ"))
        self.label_7.setText(_translate("MainWindow", "РАСШИФРОВАНИЕ"))
        self.label_4.setText(_translate("MainWindow", "ШИФРОВАНИЕ"))
        self.encrypt_btn.setText(_translate("MainWindow", "Зашифровать"))
        self.label_8.setText(_translate("MainWindow", "ТЕКСТ"))
        self.label_11.setText(_translate("MainWindow", "Шифротекст"))
        self.label.setText(_translate("MainWindow", "КЛЮЧ"))


class Playfair(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(Playfair, self).__init__()
        self.setupUi(self)
        self.functions()

    def functions(self):
        self.encrypt_btn.clicked.connect(lambda: self.encrypt(self.text_edit.toPlainText(),
                                                              self.lineEdit.text()))

        self.decrypt_btn.clicked.connect(lambda: self.decrypt(self.text_edit_encrypted.toPlainText(),
                                                              self.lineEdit.text()))

    def encrypt(self, text: str, key: str):
        text += '!'
        encrypted_text = ''
        if not key.isalpha():
            show_err(2)
            return 0
        lang = define_language(key)
        if not lang:
            show_err(2)
            return 0

        match lang:
            case 'english':
                alphabet = en_alph
            case 'russian':
                alphabet = ru_alph
            case _:
                raise Exception("Wrong language")
        tmp = ''
        text_list = []

        for i in range(len(text)):
            if text[i].lower() in alphabet:
                tmp += text[i]
            if text[i].lower() not in alphabet:
                if tmp != '':
                    text_list.append(tmp)
                tmp = ''

                if i < len(text) - 1:
                    text_list.append(tmp)

        i = 0
        for j in range(len(text_list)):
            if text_list[j] == '':
                text_list[j] += text[i]
                i += 1
            else:
                i += len(text_list[j])
        for i in text_list:
            if i.isalpha():
                text_lang = define_language(i)
                if text_lang != lang:
                    show_err(3)
                    return 0
                encrypted_text += playfair(i, key, mode='encrypt', alphabet=alphabet)
            else:
                encrypted_text += i
        print(text_list)
        print(encrypted_text)
        self.textBrowser_encrypted.setPlainText(encrypted_text)

    def decrypt(self, text: str, key: str):
        text += '!'
        decrypted_text = ''
        if not key.isalpha():
            show_err(2)
            return 0
        lang = define_language(key)
        match lang:
            case 'english':
                alphabet = en_alph
            case 'russian':
                alphabet = ru_alph
            case _:
                raise Exception("Wrong language")

        tmp = ''
        text_list = []

        for i in range(len(text)):
            if text[i].lower() in alphabet:
                tmp += text[i]
            if text[i].lower() not in alphabet:
                if tmp != '':
                    text_list.append(tmp)
                tmp = ''
                # if i < len(text) - 1 and text[i + 1] in alphabet:
                if i < len(text) - 1:
                    text_list.append(tmp)

        i = 0
        for j in range(len(text_list)):
            if text_list[j] == '':
                text_list[j] += text[i]
                i += 1
            else:
                i += len(text_list[j])

        for i in text_list:
            if i.isalpha():
                text_lang = define_language(i)
                if text_lang != lang:
                    show_err(3)
                    return 0
                decrypted_text += playfair(i, key, mode='decrypt', alphabet=alphabet)
            else:
                decrypted_text += i
        print(text_list)
        print(decrypted_text)
        self.textBrowser_decrypted.setPlainText(decrypted_text)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = Playfair()
    # MainWindow = QtWidgets.QMainWindow()
    # ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
